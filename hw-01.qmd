---
title: "HW 01"
author: "Jiayue He"
format: 
  html:
    embed-resources: true
execute: 
  warning: false
  message: false 
  error: false
toc: true
---

## 0 - Setup

```{r} 

if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
#pacman::p_load() 

devtools::install_github("tidyverse/dsbox")
```

## 1 - Road traffic accidents in Edinburgh

1) get basic dataset: 
```{r label-me-1}
#inspect the document
??accidents
library(ggplot2)
library(dplyr)
install.packages("patchwork")
library(patchwork)
accident<-dsbox::accidents
accident
```
2) start plot_weekdays 
```{r}

#find color website: https://imagecolorpicker.com/en

#weekday_accident <- accident %>% filter(day_of_week %in% c('Monday', 'Tuesday','Wednesday','Thursday','Friday'))

weekday_accident <- accident %>% filter(day_of_week != c('Saturday', 'Sunday'))
weekday_accident

weekday_plot<-ggplot(weekday_accident, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.8) +
  scale_fill_manual(values = c("Fatal" = "#a993b0", "Serious" = "#9ec9c7", "Slight" = "#fef39f"))+ xlab("weekday") +
  ggtitle("weekday")

weekday_plot


```
3) another plot_weekend
```{r}


weekend_accident <- accident %>% filter(day_of_week %in% c('Saturday', 'Sunday'))
weekend_accident


weekend_plot<-ggplot(weekend_accident, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.8) +
  scale_y_continuous(breaks = c(0, 1e-05, 2e-05)) +
  scale_fill_manual(values = c("Fatal" = "#a993b0", "Serious" = "#9ec9c7", "Slight" = "#fef39f"))+ xlab("Time of day")+
  ggtitle("weekend")

weekend_plot

```
4) integrate the plot 
```{r}

weekday_accident$day_type <- 'Weekday'
weekend_accident$day_type <- 'Weekend'

total_accidents <- bind_rows(weekday_accident, weekend_accident)
total_accidents

combined_plot <- ggplot(total_accidents, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.8) +
  facet_wrap(~ day_type, ncol = 1, scales = 'fixed') +
  scale_fill_manual(values = c("Fatal" = "#a993b0", "Serious" = "#9ec9c7", "Slight" = "#fef39f")) +
  labs(title = "Number of accidents throughout the day",
       subtitle = "By day of week and severity",
       x = "Time of day",
       y = "Density") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0), 
        plot.subtitle = element_text(hjust = 0),
        legend.position = "right")

combined_plot

```
5) interpret in context of the data: 

1) The plot plots Number of accidents throughout the day based on two catalogs: weekday accidents and weekend accidents. the x axis represents the time period in a day, while the y axis represents the density of the accident. There are three categories of accidents, namely slight accident, serious accident, and fatal accident. 

2) The plot reflects the Number of accidents happened throughout the day, in a whole week including weekdays and weekend, the slight accident happens most frequently on average in a day. 

3) In the weekdays, the fatal accident happens most frequently between 11:00 to 12:00, and both slight and serious accident happens most frequently around 17:00 in a day. 

4) In the weekend, there is no fatal accident, and the slight accident happens most frequently around 16:00, and serious accident happens most frequently around 19:00. 

5) The plot also compares the number of accidents between weekdays and weekend. It show that there is no fatal accident happened on weekend, and the peaks of all kind of accidents happened on weekend are lower than that on weekdays. 

In summary, these plots can provide insights about when accidents are more likely to occur and how accident severity distributions over a day during a week. 

## 2 - NYC marathon winners

loading packages and dataset: 

```{r label-me-2}
install.packages("openintro")
install.packages("airports")
install.packages("cherryblossom")
install.packages("usdata")
library(openintro)
nyc_marathon
```
a. Create a histogram and a box plot of the distribution of marathon times of all runners in the dataset. What features of the distribution are apparent in the histogram and not the box plot? What features are apparent in the box plot but not in the histogram?

1) histogram: 
```{r label-me-2}

hist_plot <- ggplot(nyc_marathon, aes(x = time_hrs)) +
  geom_histogram(binwidth = 0.05, fill = 'yellow', color = 'black') +
  labs(title = 'Histogram', x = 'Time_Hours', y = 'Runners')



hist_plot 
```
2) box plot: 
```{r label-me-2}

box_plot <- ggplot(nyc_marathon, aes(x = time_hrs)) +
  geom_boxplot(fill = 'yellow') +
  labs(title = 'Box Plot ', x = 'Time_Hours')

box_plot

```
3) What features of the distribution are apparent in the histogram and not the box plot? 
  a) It shows a general distribution.
  b) The distribution is right-skewed. 
  c) There are two peaks, which can tell at which time period most of runner funish the marathon. 
  

4) What features are apparent in the box plot but not in the histogram?
  a) It shows that there are four outliners. 
  b) The horizontal line tells that the normal finishing time
  c) the vertical line tell the medium
  d) It also tells the interquartile range which present about 1/2 data 


b. Create a side-by-side box plots of marathon times for men and women. Use different colors for the each of the box plots â€“ do not use the default colors, but instead manually define them (you can choose any two colors you want). Based on the plots you made, compare the distribution of marathon times for men and women.

```{r}


men_nyc_marathon <- nyc_marathon %>% filter(division %in% c('Men'))
men_nyc_marathon

women_nyc_marathon <- nyc_marathon%>% filter(division %in% c('Women'))
women_nyc_marathon

y_min <- min(nyc_marathon$time_hrs, na.rm = TRUE)
y_max <- max(nyc_marathon$time_hrs, na.rm = TRUE)


men_box_plot <- ggplot(men_nyc_marathon, aes(y = time_hrs)) +
  geom_boxplot(fill = 'green') +
  labs(title = 'man', y = 'Time_Hours')+
  coord_cartesian(ylim = c(y_min, y_max)) 
men_box_plot

women_box_plot <- ggplot(women_nyc_marathon, aes(y = time_hrs)) +
  geom_boxplot(fill = 'red') +
  labs(title = 'woman ', y = 'Time_Hours')+
  coord_cartesian(ylim = c(y_min, y_max)) 
women_box_plot


side_box_plot<-men_box_plot|women_box_plot

side_box_plot

#Based on the plots you made, compare the distribution of marathon times for men and women: 

#compared distribution, it shows that women used more time to finish the marathon then men.
  
```

c. What information in the above plot is redundant? Redo the plot avoiding this redundancy. How does this update change the data-to-ink ratio?

```{r}

new_side_box_plot<-ggplot(nyc_marathon, aes(x = division, y = time_hrs, fill = division)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Men" = "green", "Women" = "red")) +  
  labs(title = "Marathon Times for Men and Women",
       x = "Division",
       y = "time_hour") +
  theme_minimal()  

new_side_box_plot

#How does this update change the data-to-ink ratio?

# in the previous question, I created two basic graphs, and then combine them together. The background is dark, and there are two y axis lables, and the women's label is even in the middle of the graph which can be district. 

#while in this new graph, I plot two plots in one single plot and put them side-by-side. I also used theme_minimal() to reduce the unnecessary background color so the main graph can be more distinct. 

#in addition, in the previous graph, there are two title, but in the new graph, the title turns to the x-axis label which reduce the ink and make it is more convinent to observe and compare. 
```
d. Visualize the marathon times of men and women over the years. As is usual with time series plot, year should go on the x-axis. Use different colors and shapes to represent the times for men and women. Make sure your colors match those in the previous part. Once you have your plot, describe what is visible in this plot but not in the others.

```{r}

over_year_plot <- ggplot(nyc_marathon, aes(x = year, y = time_hrs, color = division, shape = division)) +
  geom_point() + 
  scale_color_manual(values = c("Men" = "green", "Women" ="red")) +
  scale_shape_manual(values = c("Men" = 17, "Women" = 15)) + 
  labs(title = 'Marathon Times Over the Years', x = 'Year', y = "Time_Hours") +
  theme_minimal()  

over_year_plot

#describe what is visible in this plot but not in the others.

#1) this plot can show the trend of marathon finish times acorss the year for both men and women. 
#2) It also shows that after 1980, the finish time dropped largely for both man and women 
#3) This plot also show the finsih time differnece between men and women. It looks like the difference of time between men and women was similar over the years. 


```


## 3 - US counties
a. What does the following code do? Does it work? Does it make sense? Why/why not?

```{r}
county_complete

#document: https://cran.r-project.org/web/packages/usdata/usdata.pdf
#Demographic data on the United States at the county and state levels spanning multiple years.

??contry
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))

#1) What does the following code do? 
  #based on the code, it looks like that it tries to 
  #1) plot the relationship between education level and median household income.
  #2) the relationship between the what type of county-level smoking ban in place in 2010 (none, partial, comprehensive) and population in 2017 

#2) Does it work?
  #based on the graph, it looks like both geom_point and geom_boxplot are on the plot, but the relationships look unclear. I would say the code does not work in its expected way and 

#3) Does it make sense? Why/why not?
  #I think the code and plots are not making sense. since those two relationships are not related, it does not make sense to plot them into one single plot. 

```

b. Which of the following two plots makes it easier to compare poverty levels (poverty) across people from different median education levels (median_edu)? What does this say about when to place a faceting variable across rows or columns?
```{r}
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)



ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)


#1) Which of the following two plots makes it easier to compare poverty levels (poverty) across people from different median education levels (median_edu)?
#the second one makes it easier to compare poverty levels across people from different median education levels.Because it makes poverty percentage as the shared axis across different categories. Also, it make the scale of poverty axis lager which is more clear to see the poverty level of the points. In such as way, it allows direct and clear  comparison between poverty and education level. 

#2)  What does this say about when to place a faceting variable across rows or columns?
  #(variable ~.) make graph horizontally align, it is useful when people want to compare changes across the y axis for different categories. 
  #(.~ variable) makes graph vertically align, it is useful when people want to compare changes across. the x axis for different categories. 

```

c. Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, itâ€™s metro.

```{r}
par(mfrow = c(4, 2))
#plot A
PlotA<-ggplot(county,aes(x = homeownership, y = poverty)) + 
  geom_point(size = 2.5) + 
  ggtitle("Plot A")
PlotA

#plot B
PlotB<-ggplot(county,aes(x = homeownership, y = poverty)) + 
  geom_point(size = 2.5) + 
  geom_smooth(method = "loess", color = "blue", se = FALSE) + 
  ggtitle("Plot B")
PlotB

#plot C
PlotC<-ggplot(county,aes(x = homeownership, y = poverty)) + 
  geom_point(size = 2.5) + 
  geom_smooth(aes(fill = metro), color = "green", se = FALSE) + 
  ggtitle("Plot C")+
  theme(legend.position = "none")

PlotC

#plot D
PlotD<-ggplot(county,aes(x = homeownership, y = poverty)) + 
  geom_smooth(aes(fill = metro), color = "blue", se = FALSE) + 
  geom_point(size = 2.5) + 
  ggtitle("Plot D")+
  theme(legend.position = "none")

PlotD
#plot E

PlotE <- ggplot(county, aes(x = homeownership, y = poverty)) + 
  geom_point(aes(color = metro), size = 2.5) + 
  scale_color_manual(values = c("no" = "#f7766d", "yes" = "#02bfc4", "NA" = "#7f7f7f")) +
  ggnewscale::new_scale_color() +
  geom_smooth(aes(linetype = metro), se = FALSE, color = "blue") + 
  scale_linetype_manual("metro ", values = c("no" = "solid", "yes" = "twodash")) +
  ggtitle("Plot E")

PlotE

#plot F

PlotF <- ggplot(county, aes(x = homeownership, y = poverty)) + 
  geom_point(aes(color = metro), size = 2.5) + 
  scale_color_manual(values = c("no" = "#f7766d", "yes" = "#02bfc4", "NA" = "#7f7f7f")) +
  geom_smooth(aes(color = metro), se = FALSE) + 
  ggtitle("Plot F")
PlotF

#plot G

PlotG<-ggplot(county,aes(x = homeownership, y = poverty,color = metro)) + 
  geom_point(size = 2.5) + 
  scale_color_manual(values = c("no" = "#f7766d", "yes" = "#02bfc4", "NA" = "#7f7f7f")) +
  geom_smooth(method = "loess", color = "blue", se = FALSE) + 
  ggtitle("Plot G")
  
PlotG
#plot H

PlotH<-ggplot(county,aes(x = homeownership, y = poverty,color = metro)) + 
  geom_point(size = 2.5) + 
  scale_color_manual(values = c("no" = "#f7766d", "yes" = "#02bfc4", "<NA>" = "#7f7f7f")) +
  ggtitle("Plot H")
PlotH
```

```{r}
combined_plot<-PlotA+PlotB+PlotC+PlotD+PlotE+PlotF+PlotG+PlotH+plot_layout(ncol = 2, nrow = 4)
combined_plot
```

## 4 - Rental apartments in SF

```{r}
# Get the Data
install.packages("tidytuesdayR")
library(tidytuesdayR)
install.packages("tidyverse")
library(tidyverse)
rent <- tuesdata$rent
rent
```
1) Limit your analysis to rentals where the full unit is available, i.e. (room_in_apt	== 0).
2) You have the flexibility to choose which years and which neighborhoods. Note that you should have a maximum of 8 neighborhoods on your visualization, but one or more of them can be a combination of many (e.g., an "other" category). 
```{r}
library(stringr)
library(purrr)
# Filter data for full units only and only keep columns with year, nhood, price, beds
sf_full_less <- rent %>%
  filter(city == "san francisco", room_in_apt == 0) %>%
  select(year, nhood, price, beds)

#add columns for price per bedroom and clean the data by reducing the NA rows. 
rent_new <- sf_full_less %>%
  mutate(price_per_bedroom = ifelse(beds > 0, price / beds, NA))%>%
  filter(!is.na(beds) & !is.na(price_per_bedroom))
rent_new

```

pick 8 eight neiborhood with same years. 
```{r}
# lists all the years each neighborhood has
nhood_years <- rent_new %>%
  group_by(nhood) %>%
  summarize(years_list = list(sort(unique(year)))) %>%
  mutate(years_string = map_chr(years_list, ~ paste(.x, collapse = ', '))) %>%
  select(-years_list) %>%
  ungroup()

nhood_years

# find neighborhoods with identical years_string, 
identical_years <- nhood_years %>%
  add_count(years_string) %>% 
  filter(n == max(n)) %>%
  pull(nhood) 

identical_years 

#check if they have the same number of years
shared_years_nhoods_num <- rent_new %>%
  filter(nhood %in% c("SOMA / south beach", "bernal", "diamond heights", "ingleside", "lower haight", "noe valley", "pacific heights", "presidio hts / laurel hts / lake st", "USF / anza vista", "civic / van ness", "cole valley", "glen park", "lakeshore", "marina / cow hollow", "outer sunset", "potrero hill", "north beach / telegraph hill", "parkside", "sea cliff")) %>%
  group_by(nhood) %>%
  summarize(years_list = list(unique(year)))

shared_years_nhoods_num



#check if eight of them have the same period of years
shared_years_nhoods<-rent_new %>%
  filter(nhood %in% c("bernal", "diamond heights", "ingleside", "lower haight", "noe valley", "pacific heights","cole valley", "glen park", "lakeshore","outer sunset", "potrero hill","parkside", "sea cliff"))%>%
  group_by(nhood) %>%
  summarize(years_list = list(sort(unique(year)))) %>%
  mutate(years_string = map_chr(years_list, ~ paste(.x, collapse = ', '))) %>%
  select(-years_list) %>%
  ungroup()%>%
  mutate(row_id = row_number()) %>%
  select(row_id, everything())

shared_years_nhoods

#get eight neiborhood
rent_updated <- rent_new %>% 
  filter(nhood %in% c("bernal", "diamond heights", "ingleside", "lower haight", "noe valley", "pacific heights","cole valley", "glen park"))

rent_updated

```

Create a visualization that will help you compare the distribution of rental prices (price) per bedroom (beds) across neighborhoods (nhood) in the city of San Francisco (city == "san francisco"), over time. Your visualization should also display some measure of the variability in your data. You get to decide what type of visualization to create and there is more than one correct answer! In your answer, include a brief description of why you made the choices you made as well as an interpretation of the findings of how rental prices vary over time and neighborhoods in San Francisco.
```{r}
# Calculate the median price per bedroom for each neighborhood based on the year
median_prices <- rent_updated %>%
  group_by(year, nhood) %>%
  summarize(median_price_per_bedroom = median(price_per_bedroom, na.rm = TRUE)) %>%
  ungroup()
median_prices 

#use a box plot. 

box_lot<-ggplot(data = median_prices, aes(x =nhood , y = median_price_per_bedroom)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Box Plot of Median Rental Prices per Bedroom Over Time",
       x = "neighberhood",
       y = "Median Price per Bedroom")

box_lot


#Scatter Plot with Trend Lines
scatter_plot<-ggplot(data = median_prices, aes(x = year, y = median_price_per_bedroom, color = nhood)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +  
  scale_x_continuous(breaks = seq(min(median_prices$year), max(median_prices$year), by = 1)) +
  theme_minimal() +
  labs(title = "Scatter Plot with Trend Lines for Median Rental Prices per Bedroom Over Time",
       x = "Year",
       y = "Median Price per Bedroom")+
  theme(legend.position = "right",
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 


scatter_plot

median_price_plot <- ggplot(median_prices, aes(x = year, y = median_price_per_bedroom, group = nhood, color = nhood)) +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = seq(min(median_prices$year), max(median_prices$year), by = 1)) +
  theme_minimal() +
  labs(title = "Median Rental Prices per Bedroom Across Neighborhoods Over Time",
       x = "Year",
       y = "Line plot Median Price per Bedroom",
       color = "Neighborhood") +
  theme(legend.position = "right",
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 


median_price_plot

combine_plot_thisone<-median_price_plot/scatter_plot/box_lot
combine_plot_thisone

#a brief description of why you made the choices you made as well as an interpretation of the findings of how rental prices vary over time and neighborhoods in San Francisco.

#1) I frist cleaned up the data to get the data that I need to study the how rental prices vary over time. This is why I choose to have the city = San Francisco, and room in apt = 0. Then I need to choose 8 neighborhoods to compare the price per room over time. I noticed that not every neighborhood has the same number of year record, some only have 2 years' records, while other has like 18 years' record. Therefore I further organized the data frame to find neighborhood who share the same year's records. Finally, I picked the following neighborhood: "bernal", "diamond heights", "ingleside", "lower haight", "noe valley", "pacific heights","cole valley", "glen park", "lakeshore","outer sunset", "potrero hill","parkside", "sea cliff" who have the record from 2001 to 2018. 

#2) Next, I get the price per room using price/number of bedroom and then I got the median price for each neighborhood by year. The reason why choose median is because median has better ability to represent the normal and regular price in a neighborhood.

#3) Finally, I used three plots to compare the price per bedroom in different neighborhoods over time. I feel the line plot can better help me to interpret the comparison, becasue it not only show each year's median price of each neighborhood, it aslo prsent the price change trend over times.

#4)Based on. the graph, it shows that some neighborhoods 's median rental prices experiencing more volatility than others, like Pacific Heights and Cole Valley. Also, some neighborhoods consistently have higher median rental prices per bedroom, like Pacific Heights and Cole Valley.In addition, almost all neighborhoods show a upward. trend in rental prices. Furthermore, there are some sharp increases or decreases in specif years. 


```

## 5 - Napoleonâ€™s march.

Get the Napoleon's dataset -- myself's code
```{r}
library(tidyverse)
library(lubridate)
#install.packages("pander")
#install.packages("ggmap")

library(ggmap)
library(ggrepel)
library(gridExtra)
library(pander)

napoleon_data <- readRDS("/Users/melissahe/Documents/GitHub/hw-01/data/napoleon.rds")

# Check the structure of the loaded data
str(napoleon_data)

cities <- napoleon_data$cities
temperatures <- napoleon_data$temperatures
troops <- napoleon_data$troops
```
The following code are copied from https://github.com/andrewheiss/fancy-minard: 

Step 1) create the basic skeleton of the geography plot

```{r}
#Display the first six ros of the troops data frame. 
troops %>% head() %>% pandoc.table(style = "rmarkdown")
#create a line plot based the dataset: troops, using longitude as x-axis, latitude as y axis, 
#using group to group the points that should be connected together in a path
ori_plot<-ggplot(troops, aes(x = long, y = lat, group = group)) +
  geom_path() #connect the data points. 
ori_plot
```
Step 2) add more aesthetic elements to the original map (above)

The size of the path hides the drama of the plot. Napoleon started the 1812 campaign with 422,000 troops and returned with only 10,000. ggplot automatically makes discrete categories for the survivors variable, resulting in three not-very-granular categories. We can adjust the scale to allow for more categories, thus showing more variation in size and highlighting the devastation of the army:
```{r}

#same as the above code, the x,y axis remain the same, but add different colors based on the two directions of the troop's movement 
#using survivors to decide the wide size of the path
#using round line make the lines connect smoother. 

plot_2<-ggplot(troops, aes(x = long, y = lat, group = group, 
                   color = direction, size = survivors)) +
  geom_path(lineend = "round")+
  scale_size(range = c(0.5, 15)) 
# Adjust the size scale to allow more variation which can make the size of each path more similar to the original graph 
plot_2
```
Step 3) add cities' name and change color to better match the original grah
```{r}

geogragh_plot<-ggplot() +
  geom_path(data = troops, aes(x = long, y = lat, group = group, 
                               color = direction, size = survivors),
            lineend = "round") +
  geom_point(data = cities, aes(x = long, y = lat)) + # add points to cities
  geom_text(data = cities, aes(x = long, y = lat, label = city), 
            vjust = 1.5, #add text to city points which below the points
            size = 3) +
  scale_size(range = c(0.5, 13)) + 
  scale_colour_manual(values = c("#DFC17E", "#252523")) +#change color to match original graph
  labs(x = NULL, y = NULL) + #remove axis labels 
  guides(color = FALSE, size = FALSE) #remove the lengends

geogragh_plot

```
The following code are copied from http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html: 

Step 4) create temperature plot 

```{r}
#create a new column to the temperatures data set, the new column contains the lables needed by the gragh. 
temperatures <- temperatures %>%
  mutate(nice.label = paste0(temp, "Â°, ", month, ". ", day))
temperatures

temp_plot<-ggplot(temperatures, aes(long, temp)) + #using longtitudes as x axis, and temperature as the y axis 
    geom_path(color="grey", size=1.5) + #connect the temperature points 
    geom_point(size=1) + #add points for each temperatures
  geom_text(aes(label=nice.label), size=2, vjust=1.5) #add text labels below each points 
temp_plot

```
Step 6) combine two graphs together: 

```{r}
geogragh_plot +
  coord_cartesian(xlim = c(24, 38)) + # set the x asis to coincide with temperature plot 
  labs(x = NULL, y = NULL) + #get rid of the x and y axis' labels
  theme_void() # disable the back gourd color

#store the final plot in a variable for later use 
geogragh_plot_fixed <- last_plot() 



temp_plot + 
  coord_cartesian(xlim = c(24, 38)) + #set x axis to coincide with geography plot
  labs(x = NULL, y= NULL) +  # remove  x y axis's labels
  theme_bw() + # use white background and balck grdilines 
  theme(panel.grid.major.x = element_blank(), #remove major x gridelines 
        panel.grid.minor.x = element_blank(), #remove minor x gridlines 
        panel.grid.minor.y = element_blank(), #remove minor y gradilines 
        axis.text.x = element_blank(),  #remove x-axis text 
        axis.ticks = element_blank(), # remove axis thicks 
        panel.border = element_blank()) #remove border around the poanel 

#store the final temperature plot in a varaible to later use 
temp_plot_fixed <- last_plot()
```

```{r}

#arrange two plots on top of each other with a specified height ratio 
grid.arrange(geogragh_plot_fixed, temp_plot_fixed, nrow=2, heights=c(3.5, 1.7))

#draw a rectangle around the entire grid of plots using gray border line with no fill color 
grid.rect(width = .99, height = .99, gp = gpar(lwd = 2, col = "gray", fill = NA))

```


Reference: 
#I get to know what is Napoleon's March 
https://ageofrevolution.org/200-object/flow-map-of-napoleons-invasion-of-russia/#:~:text=Napoleon%20invaded%20Russia%20in%20June,their%20long%20wars%20against%20France. 

#I borrow most of the code from the following link to recreate the geography plot
https://github.com/andrewheiss/fancy-minard

#I borrow most of the code frme the following link to recreate the temperature plot
http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html

